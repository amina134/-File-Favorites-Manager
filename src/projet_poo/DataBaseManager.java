package projet_poo;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.sql.*;
import java.util.*;
import java.util.stream.Collectors;

public class DataBaseManager {

    // Configuration de la connexion Oracle
    private static final String URL = "jdbc:oracle:thin:@localhost:1521:XE";
    private static final String USER = "SYSTEM";
    private static final String PASSWORD = "root123";

    // Établir la connexion à la base de données
    public static Connection getConnection() throws SQLException {
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            return DriverManager.getConnection(URL, USER, PASSWORD);
        } catch (ClassNotFoundException e) {
            throw new SQLException("Driver Oracle JDBC non trouve", e);
        }
    }

    // Tester la connexion
    public static void testConnection() {
        try (Connection conn = getConnection()) {
            System.out.println("Connexion a la base de donnees Oracle etablie avec succes !");
        } catch (SQLException e) {
            System.err.println("Echec de la connexion a la base de donnees Oracle: " + e.getMessage());
            throw new RuntimeException(e);
        }
    }

    public static void initDatabase() {
        try (Connection conn = getConnection(); Statement stmt = conn.createStatement()) {
            // Vérifier et créer la table Fichiers si elle n'existe pas
            String checkFichiers = "SELECT COUNT(*) FROM user_tables WHERE table_name = 'FICHIERS'";
            ResultSet rs = stmt.executeQuery(checkFichiers);
            rs.next();
            if (rs.getInt(1) == 0) {
                stmt.executeUpdate("CREATE TABLE Fichiers ("
                        + "ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, "
                        + "CHEMIN VARCHAR2(4000) NOT NULL, "
                        + "TITRE VARCHAR2(255) NOT NULL, "
                        + "AUTEUR VARCHAR2(255), "
                        + "RESUME CLOB, "
                        + "COMMENTAIRES CLOB)");
                System.out.println("Table Fichiers creee.");
            } else {
                System.out.println("Table Fichiers existe deja.");
            }

            // Vérifier et créer la table Tags si elle n'existe pas
            String checkTags = "SELECT COUNT(*) FROM user_tables WHERE table_name = 'TAGS'";
            rs = stmt.executeQuery(checkTags);
            rs.next();
            if (rs.getInt(1) == 0) {
                stmt.executeUpdate("CREATE TABLE Tags ("
                        + "ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY, "
                        + "NOM VARCHAR2(100) UNIQUE NOT NULL)");
                System.out.println("Table Tags creee.");
            } else {
                System.out.println("Table Tags existe deja.");
            }

            // Vérifier et créer la table FichierTags si elle n'existe pas
            String checkFichierTags = "SELECT COUNT(*) FROM user_tables WHERE table_name = 'FICHIERTAGS'";
            rs = stmt.executeQuery(checkFichierTags);
            rs.next();
            if (rs.getInt(1) == 0) {
                stmt.executeUpdate("CREATE TABLE FichierTags ("
                        + "FICHIER_ID NUMBER NOT NULL, "
                        + "TAG_ID NUMBER NOT NULL, "
                        + "PRIMARY KEY (FICHIER_ID, TAG_ID), "
                        + "FOREIGN KEY (FICHIER_ID) REFERENCES Fichiers(ID) ON DELETE CASCADE, "
                        + "FOREIGN KEY (TAG_ID) REFERENCES Tags(ID) ON DELETE CASCADE)");
                System.out.println("Table FichierTags creee.");
            } else {
                System.out.println("Table FichierTags existe deja.");
            }

            System.out.println("Initialisation de la base de donnees terminee.");
        } catch (SQLException e) {
            System.err.println("Erreur lors de l'initialisation de la base de donnees: " + e.getMessage());
            throw new RuntimeException("Echec de l'initialisation de la base de donnees", e);
        }
    }

    // Ajouter un fichier avec ses tags
    public static void ajouterFichierAvecTags(String chemin, String auteur, String titre, List<String> tags, String resume, String commentaires) throws SQLException {
        if (chemin == null || chemin.trim().isEmpty() || titre == null || titre.trim().isEmpty()) {
            throw new IllegalArgumentException("Le chemin et le titre sont obligatoires.");
        }
        if (tags == null || tags.stream().allMatch(tag -> tag == null || tag.trim().isEmpty())) {
            throw new IllegalArgumentException("Au moins un tag valide est requis.");
        }

        try (Connection conn = getConnection()) {
            conn.setAutoCommit(false);
            try {
                // Insérer le fichier
                String insertFichier = "INSERT INTO Fichiers (CHEMIN, TITRE, AUTEUR, RESUME, COMMENTAIRES) VALUES (?, ?, ?, ?, ?)";
                int fichierId;
                try (PreparedStatement ps = conn.prepareStatement(insertFichier, new String[]{"ID"})) {
                    ps.setString(1, chemin);
                    ps.setString(2, titre);
                    ps.setString(3, auteur != null && !auteur.trim().isEmpty() ? auteur : null);
                    ps.setString(4, resume != null && !resume.trim().isEmpty() ? resume : null);
                    ps.setString(5, commentaires != null && !commentaires.trim().isEmpty() ? commentaires : null);
                    ps.executeUpdate();

                    try (ResultSet rs = ps.getGeneratedKeys()) {
                        if (rs.next()) {
                            fichierId = rs.getInt(1);
                        } else {
                            throw new SQLException("Impossible de récupérer l'ID du fichier inséré.");
                        }
                    }
                }

                // Insérer les tags
                String insertTag = "MERGE INTO Tags t USING (SELECT ? AS NOM FROM dual) src ON (t.NOM = src.NOM) WHEN NOT MATCHED THEN INSERT (NOM) VALUES (src.NOM)";
                String insertLien = "INSERT INTO FichierTags (FICHIER_ID, TAG_ID) SELECT ?, ID FROM Tags WHERE NOM = ?";
                try (PreparedStatement psTag = conn.prepareStatement(insertTag); PreparedStatement psLien = conn.prepareStatement(insertLien)) {
                    for (String tag : tags) {
                        String trimmed = tag != null ? tag.trim() : "";
                        if (!trimmed.isEmpty()) {
                            if (trimmed.length() > 100 || !trimmed.matches("[a-zA-Z0-9\\s_-]+")) {
                                throw new IllegalArgumentException("Tag invalide: " + trimmed);
                            }
                            psTag.setString(1, trimmed);
                            psTag.executeUpdate();
                            psLien.setInt(1, fichierId);
                            psLien.setString(2, trimmed);
                            psLien.executeUpdate();
                        }
                    }
                }

                conn.commit();
            } catch (SQLException e) {
                conn.rollback();
                throw new SQLException("Erreur lors de l'insertion du fichier: " + e.getMessage(), e);
            }
        }
    }

    // Mettre à jour les tags d'un fichier
    public static void updateTagsForFichier(int fichierId, List<String> tags) throws SQLException {
        if (tags == null || tags.stream().allMatch(tag -> tag == null || tag.trim().isEmpty())) {
            throw new IllegalArgumentException("Au moins un tag valide est requis.");
        }

        try (Connection conn = getConnection()) {
            conn.setAutoCommit(false);
            try {
                // Supprimer les tags existants
                String deleteSql = "DELETE FROM FichierTags WHERE FICHIER_ID = ?";
                try (PreparedStatement pstmt = conn.prepareStatement(deleteSql)) {
                    pstmt.setInt(1, fichierId);
                    pstmt.executeUpdate();
                }

                // Insérer les nouveaux tags
                String insertTag = "MERGE INTO Tags t USING (SELECT ? AS NOM FROM dual) src ON (t.NOM = src.NOM) WHEN NOT MATCHED THEN INSERT (NOM) VALUES (src.NOM)";
                String insertLien = "INSERT INTO FichierTags (FICHIER_ID, TAG_ID) SELECT ?, ID FROM Tags WHERE NOM = ?";
                try (PreparedStatement psTag = conn.prepareStatement(insertTag); PreparedStatement psLien = conn.prepareStatement(insertLien)) {
                    for (String tag : tags) {
                        String trimmed = tag != null ? tag.trim() : "";
                        if (!trimmed.isEmpty()) {
                            if (trimmed.length() > 100 || !trimmed.matches("[a-zA-Z0-9\\s_-]+")) {
                                throw new IllegalArgumentException("Tag invalide: " + trimmed);
                            }
                            psTag.setString(1, trimmed);
                            psTag.executeUpdate();
                            psLien.setInt(1, fichierId);
                            psLien.setString(2, trimmed);
                            psLien.executeUpdate();
                        }
                    }
                }

                conn.commit();
            } catch (SQLException e) {
                conn.rollback();
                throw new SQLException("Erreur lors de la mise à jour des tags: " + e.getMessage(), e);
            }
        }
    }

    // Mettre à jour un fichier
    public static boolean updateFichier(int id, String titre, String auteur, String resume, String commentaires) throws SQLException {
        if (titre == null || titre.trim().isEmpty()) {
            throw new IllegalArgumentException("Le titre est obligatoire.");
        }

        String sql = "UPDATE Fichiers SET TITRE = ?, AUTEUR = ?, RESUME = ?, COMMENTAIRES = ? WHERE ID = ?";
        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, titre);
            stmt.setString(2, auteur != null && !auteur.trim().isEmpty() ? auteur : null);
            stmt.setString(3, resume != null && !resume.trim().isEmpty() ? resume : null);
            stmt.setString(4, commentaires != null && !commentaires.trim().isEmpty() ? commentaires : null);
            stmt.setInt(5, id);
            return stmt.executeUpdate() > 0;
        }
    }

    // Supprimer un fichier
    public static boolean supprimerFichierParId(int id) throws SQLException {
        String sql = "DELETE FROM Fichiers WHERE ID = ?";
        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, id);
            return stmt.executeUpdate() > 0;
        }
    }

    // Récupérer tous les fichiers favoris
    public static List<Fichier> getFichiersFavoris() throws SQLException {
        List<Fichier> fichiers = new ArrayList<>();
        String sql = "SELECT ID, CHEMIN, TITRE, AUTEUR, RESUME, COMMENTAIRES FROM Fichiers";
        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(sql); ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                fichiers.add(new Fichier(
                    rs.getInt("ID"),
                    rs.getString("CHEMIN"),
                    rs.getString("TITRE"),
                    rs.getString("AUTEUR"),
                    rs.getString("RESUME"),
                    rs.getString("COMMENTAIRES")
                ));
            }
        }
        return fichiers;
    }

    // Récupérer les tags d'un fichier
    public static List<String> getTagsParFichierId(String idFichier) throws SQLException {
        List<String> tags = new ArrayList<>();
        String sql = "SELECT t.NOM FROM FichierTags ft JOIN Tags t ON ft.TAG_ID = t.ID WHERE ft.FICHIER_ID = ?";
        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, idFichier);
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    tags.add(rs.getString("NOM"));
                }
            }
        }
        return tags;
    }

    // Rechercher des fichiers par tag
    public static List<Fichier> searchByTag(String tag) throws SQLException {
        List<Fichier> fichiers = new ArrayList<>();
        String sql = "SELECT f.* FROM Fichiers f JOIN FichierTags ft ON f.ID = ft.FICHIER_ID JOIN Tags t ON ft.TAG_ID = t.ID WHERE LOWER(t.NOM) LIKE LOWER(?)";
        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, "%" + tag + "%");
            try (ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    fichiers.add(new Fichier(
                        rs.getInt("ID"),
                        rs.getString("CHEMIN"),
                        rs.getString("TITRE"),
                        rs.getString("AUTEUR"),
                        rs.getString("RESUME"),
                        rs.getString("COMMENTAIRES")
                    ));
                }
            }
        }
        return fichiers;
    }

    // Lister les fichiers favoris (écran ou fichier)
    public static void listerFichiersFavoris(boolean surEcran, String cheminFichier) throws SQLException, IOException {
        String sql = "SELECT * from fichiers";
        StringBuilder affichage = new StringBuilder();
        try (Connection conn = getConnection(); PreparedStatement ps = conn.prepareStatement(sql)) {
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    List<String> tags = getTagsParFichierId(String.valueOf(rs.getInt("ID")));
                    affichage.append("Chemin: ").append(rs.getString("CHEMIN")).append("\n")
                            .append("Titre: ").append(rs.getString("TITRE")).append("\n")
                            .append("Auteur: ").append(rs.getString("AUTEUR") != null ? rs.getString("AUTEUR") : "").append("\n")
                            .append("Tags: ").append(String.join(", ", tags)).append("\n")
                            .append("Résumé: ").append(rs.getString("RESUME") != null ? rs.getString("RESUME") : "").append("\n")
                            .append("Commentaires: ").append(rs.getString("COMMENTAIRES") != null ? rs.getString("COMMENTAIRES") : "").append("\n\n");
                }
            }
        }

        if (surEcran) {
            System.out.println(affichage.toString());
        } else {
            try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(cheminFichier), StandardCharsets.UTF_8))) {
                writer.write(affichage.toString());
                System.out.println("Liste exportée vers: " + cheminFichier);
            }
        }
    }

    // Générer les statistiques
    public static String genererStatistiques() throws SQLException {
        StringBuilder stats = new StringBuilder();
        try (Connection conn = getConnection(); Statement stmt = conn.createStatement()) {
            // Nombre total de fichiers
            ResultSet rs1 = stmt.executeQuery("SELECT COUNT(*) AS total FROM Fichiers");
            if (rs1.next()) {
                stats.append("Nombre total de fichiers: ").append(rs1.getInt("total")).append("\n");
            }
            rs1.close();

            // Liste des auteurs
            stats.append("\nListe des auteurs:\n");
            ResultSet rs2 = stmt.executeQuery("SELECT DISTINCT AUTEUR FROM Fichiers WHERE AUTEUR IS NOT NULL ORDER BY AUTEUR");
            while (rs2.next()) {
                stats.append(" - ").append(rs2.getString("AUTEUR")).append("\n");
            }
            rs2.close();

            // Nombre total de tags
            ResultSet rs3 = stmt.executeQuery("SELECT COUNT(*) AS total FROM Tags");
            if (rs3.next()) {
                stats.append("\nNombre total de tags: ").append(rs3.getInt("total")).append("\n");
            }
            rs3.close();

            // Nombre de fichiers par tag
            stats.append("\nNombre de fichiers par tag:\n");
            ResultSet rs4 = stmt.executeQuery("SELECT t.NOM, COUNT(ft.FICHIER_ID) AS nbFichiers FROM Tags t JOIN FichierTags ft ON t.ID = ft.TAG_ID GROUP BY t.NOM ORDER BY nbFichiers DESC");
            while (rs4.next()) {
                stats.append(" - ").append(rs4.getString("NOM")).append(": ").append(rs4.getInt("nbFichiers")).append("\n");
            }
            rs4.close();
        }
        return stats.toString();
    }

    // Exporter les statistiques
    public static void exporterStatistiques(String cheminFichier) throws SQLException, IOException {
        String stats = genererStatistiques();
        try (BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(cheminFichier), StandardCharsets.UTF_8))) {
            writer.write(stats);
            System.out.println("Statistiques exportées vers: " + cheminFichier);
        }
    }

    // Récupérer un fichier par ID
    public static Map<String, String> getFichierParId(String id) throws SQLException {
        Map<String, String> fichier = new HashMap<>();
        String sql = "SELECT ID, TITRE, AUTEUR, CHEMIN, RESUME, COMMENTAIRES FROM Fichiers WHERE ID = ?";
        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    fichier.put("ID", rs.getString("ID"));
                    fichier.put("Titre", rs.getString("TITRE"));
                    fichier.put("Auteur", rs.getString("AUTEUR"));
                    fichier.put("Chemin", rs.getString("CHEMIN"));
                    fichier.put("Résumé", rs.getString("RESUME"));
                    fichier.put("Commentaires", rs.getString("COMMENTAIRES"));
                }
            }
        }
        return fichier;
    }

    // Récupérer tous les tags uniques
    public static List<String> getAllTags() throws SQLException {
        List<String> tags = new ArrayList<>();
        String sql = "SELECT NOM FROM Tags ORDER BY NOM";
        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(sql); ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                tags.add(rs.getString("NOM"));
            }
        }
        return tags;
    }

    // Compter le nombre de fichiers associés à un tag spécifique
    public static int getFilesCountByTag(String tag) throws SQLException {
        String sql = "SELECT COUNT(DISTINCT ft.FICHIER_ID) AS count " +
                     "FROM FichierTags ft " +
                     "JOIN Tags t ON ft.TAG_ID = t.ID " +
                     "WHERE t.NOM = ?";
        try (Connection conn = getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, tag);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("count");
                }
            }
        }
        return 0;
    }

    public static void main(String[] args) {
        testConnection();
        initDatabase();
        try {
            System.out.println(genererStatistiques());
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}